#!/usr/bin/perl
# check_perfmon  -  A Nagios plugin for fetching windows performance log data
# v.1.1
# Based on getlog.pl (by the same author) v.1.1
#
# This script reads Windows performance logs (normally saved to a samba share)
# and returns the last value for a given counter. See --help for more details.
#
# Note: the original getlog.pl was designed to run natively - without any Perl
#       modules - to save loading time. Removing the last module divided run
#       time by 3 approximately! Obviously here it's using Nagios::Plugin,
#       but since everything has been optimized for performance so running it
#       under the ePN should be lightning fast.
#
# Copyright (C) 2008-2009 Thomas Guyot-Sionnest <tguyot@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

use strict;
use warnings;
use vars qw($PROGNAME $VERSION $READ_CHNK $MAX_READ);
use Nagios::Plugin;

$PROGNAME = 'check_perfmon';
$VERSION = '1.1';

# This is the maximum read size for each read. Optimal performance can be
# obtained by setting this to the smallest number higher than your usual
# line length. THIS MUST BE A 512-BYTES MULTIPLE!! I.e. 512, 1024, 8192, 8704
# are all valid numbers.
$READ_CHNK = 512 * 2; # 1024 bytes

# Maximum buffered read size (Will stop reading lines longer than this!)
$MAX_READ = 1024 * 512; # 512KiB

my $np = Nagios::Plugin->new(
	usage => "Usage: %s -H <hostname> -L <log_directory> -C <counter> | list\n"
	    . "   [ -w <threshold> ] [ -c <threshold> ]  [ -M <max_age> ]\n"
	    . '   [ -P <perfdata> ] [ -m ]',
	version => $VERSION,
	plugin  => $PROGNAME,
	shortname => uc($PROGNAME),
	blurb => "Checks a Windows Performance log in CSV format. The file path is constructed as\n"
	    . '   <log_dir>/<hostname>.csv, case-sensitive.',
	timeout => 10,
);

$np->add_arg(
	spec => 'hostname|H=s',
	help => '-H, --hostname=<hostname>',
	required => 1,
);

$np->add_arg(
	spec => 'logdir|L=s',
	help => '-L, --logdir=<log_directory>',
	required => 1,
);

$np->add_arg(
	spec => 'counter|C=s',
	help => "-C, --counter=<counter>\n"
	   . "   Performance counter name. Use 'list' to get a list of available counters.\n"
	   . "   If the counter do not begin by a backslash (\\) the first character will be\n"
	   . "   used as the separator (every occurrence of it will be replaced by a\n"
	   . "   backslash). The separator used will be printed in output. If the separator\n"
	   . '   is a backslash, it will always be replaced with a caret (^).',
	required => 1,
);

$np->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=THRESHOLD\n"
	   . "   Warning threshold for the counter. See\n"
	   . "   http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT\n"
	   . "   for the threshold format. If -P, --perfdata is specified, thresholds apply\n"
	   . '   to the generated average.',
	required => 0,
);

$np->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=THRESHOLD\n"
	   . "   Critical threshold for the counter. See\n"
	   . "   http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT\n"
	   . "   for the threshold format. If -P, --perfdata is specified, thresholds apply\n"
	   . '   to the generated average.',
	required => 0,
);

$np->add_arg(
	spec => 'perfdata|P=s',
	help => "-P, --perfdata\n"
	  . "   Pass the current counter value and timestamp as additional performance data\n"
	  . "   and use it to get the 1-second average during the interval. You should pass\n"
	  . '   \'$SERVICEPERFDATA$\' as argument of this option (Don\'t forget to quote it!).',
	required => 0,
);

$np->add_arg(
	spec => 'perminute|m+',
	help => "-m, --perminute\n"
	   . "   Only effective with -P, --perfdata; make the average per-minute. Also\n"
	   . '   affects thresholds (They will be against the per-minute average).',
	required => 0,
);

$np->add_arg(
	spec => 'maxage|M=i',
	help => "-M, --maxage=<max_age>\n"
	   . "   Maximum age in seconds of the last CSV entry for the data to be considered\n"
	   . "   valid, after which the plugin will return UNKNOWN.\n"
	   . '   Default is no checking (0)',
	default => 0,
	required => 0,
);

$np->getopts;

# Assign and check args
my $log = $np->opts->logdir . '/' . $np->opts->hostname . '.csv';
$np->nagios_exit('UNKNOWN', "File not found: $log. Verify the '-H' and '-L' arguments.")
	unless (-f $log);
my $counter = $np->opts->counter;
my $perfdata = $np->opts->perfdata;
my $perminute = $np->opts->perminute;
my $max_age = $np->opts->maxage;
my $verbose = $np->opts->verbose;

my $warning = $np->opts->warning;
my $critical = $np->opts->critical;
$np->set_thresholds(
    warning => $warning,
    critical => $critical,
);

# Since we can't mix buffered and system reads, we'll do only system reads.
open (LOG, "<$log") or
	$np->nagios_exit('UNKNOWN', "Cannot open $log for reading :$!");

my $header = get_head() or
	$np->nagios_exit('UNKNOWN', "Failed to read first log line");
my $last = get_tail() or
	$np->nagios_exit('UNKNOWN', "Failed to read last log line");

close (LOG);

# Strip the first column (we'll do the same to get the date field)
subst_col (0, \$header);

if ($counter eq 'list') {
	my $outstr = "Available counters:\n";
	while (defined(my $col = subst_col (0, \$header))) {
		$col = substr ($col, index ($col, "\\", 3));
		$outstr .= "$col\n";
	}
	chomp ($outstr);
	$np->nagios_exit('OK', $outstr);
}

# Check the date diff
my $datestr = subst_col (0, \$last);
if ($max_age) {
	my $diff = datediff($datestr);
	$np->nagios_exit('UNKNOWN', "Couldn't parse date string '$datestr'")
		unless (defined($diff));
	$np->nagios_exit('UNKNOWN', "Data too old ($diff seconds)")
		if ($diff > $max_age);
}

# If the first character is not backslash, assume it's the separator and
# substitute the counter accordingly
my $sep = '\\';
if ($counter =~ /^(.)/ && $1 ne $sep) {
	$sep = $1;
	$counter =~ s/\Q$sep/\\/g;
}

my $index = find_index ($counter, $header);
$np->nagios_exit('UNKNOWN', "No matching index '$counter'")
	unless (defined($index) && $index >= 0);

my $value = subst_col ($index, \$last);
# Only check for definition; allow returning empty strings and zeros!
$np->nagios_exit('UNKNOWN', "Column $index not found")
	unless (defined($value));

# Substitute backslashes (\) with carets (^), or the separator used, to avoid
# shell escaping problems.
if ($sep eq '\\') {
	$counter =~ s/\\/^/g;
} else {
	$counter =~ s/\\/$sep/g;
}

# If we use perfdata, treat the value as a counter and return the average
if (defined($perfdata)) {
	my $now = time();
	$np->add_perfdata(
		label => "time",
		value => $now,
	);
	$np->add_perfdata(
		label => "last",
		value => $value,
	);
	my ($last_ts, $last_value) = parse_last ($perfdata);
	warn ("Parsing perfdata string .$perfdata.") if ($verbose);
	if ($last_ts && defined($last_value)) {
		warn ("Counter diff: " . ($value - $last_value) . ", time diff: " . ($now - $last_ts)) if ($verbose);
		# Can't divide by 0
		$np->nagios_exit('UNKNOWN', 'Last and current times are the same!')
			if ($now == $last_ts);
		$value = ($value - $last_value) / ($now - $last_ts);
		$value *= 60 if ($perminute);
	} else {
		$np->nagios_exit('UNKNOWN', 'Couldn\'t parse last counter (normal on first run)');
	}
}		

warn ("Retrieved value: $value") if ($verbose);

# Add perfdata
$np->add_perfdata(
    label => "counter",
    value => $value,
    uom => 'c',
    threshold => $np->threshold,
);

$value = sprintf("%.02f", $value) if (index($value, '.') > 0);
# check thresholds and exit...
$np->nagios_exit($np->check_threshold($value), "$counter: $value");

sub get_head {
	my $buf = '';
	my $marker = -1;

	# Make sure we're at the beginning
	sysseek (LOG, 0, 0);

	# Loop until we get a newline
	while (my $ret = sysread (LOG, my $read, $READ_CHNK)) {
		$read =~ s/\r//g;
		$buf .= $read;
		last if (($marker = index ($buf, "\n")) > 0);
		last if (length ($buf) > $MAX_READ);
	}

	# Return the first line if we got one
	if ($marker > 0) {
		$buf = substr ($buf, 0, $marker);
		return $buf;
	}
	return undef;
}

sub get_tail {
	my $buf = '';
	my $marker = -1;

	my $length = (stat(LOG))[7]; # Size in bytes

	# Try to read up to $READ_CHNK bytes at time, but make sure we read at
	# 512-bytes boundaries. THIS IS TRICKY, don't change this unless you
	# know what you're doing!
	my $start = (int($length / 512) * 512);
	if ($start >= $READ_CHNK && $start == $length) {
		$start -= $READ_CHNK;
	} elsif ($start >= $READ_CHNK) {
		$start -= ($READ_CHNK - 512);
	} else {
		$start = 0;
	}

	sysseek (LOG, $start, 0);
	while (sysread (LOG, my $read, $READ_CHNK) > 0) {
		$read =~ s/\r//g;
		$buf = $read . $buf;
		if (($marker = index ($buf, "\n")) >= 0 && $marker != length ($buf) - 1) {
			# Make sure we got the last newline
			while ((my $tmpmark = index ($buf, "\n", $marker + 1)) > $marker) {
				# Got last newline ?
				last if ($tmpmark == length ($buf) - 1);
				$marker = $tmpmark;
			}
			last;
		}
		last if (length ($buf) > $MAX_READ);
		last if (($start -= $READ_CHNK) < 0);
		sysseek (LOG, $start, 0);
	}

	# Return the last line if we got one
	if ($marker >= 0) {
		$buf = substr ($buf, $marker + 1);
		chomp $buf;
		return $buf;
	}
	return undef;
}

sub find_index {
	my $colname = shift;
	my $line = shift;

	my $i = 0;
	while ($line && defined(my $col = subst_col (0, \$line))) {
		# Skip over the server name (\\name)
		$col = substr ($col, index ($col, "\\", 3));
		return $i if ($col eq $colname);
		$i++;
	}
	return undef;
}

sub subst_col {
	# Fetch the column indicated by $colnum and remove the scanned part from
	# $lineref (this allow faster scanning by find_index).
	# NOTE: CSV does not require delimiters on numeric values; but since Windows
	#       doesn't do that anyways it's not supported here. Could be easy to add
	#       though...
	my $colnum = shift;
	my $lineref = shift;
	my $col = undef;

	for (my $i = 0, my $marker = 0; $i <= $colnum; $i++, $marker = 0) {
		my $delim = index ($$lineref, ',', $marker);
		my $curr;
		# this is the last column?
		if ($delim < 0) {
			$delim = length ($$lineref) - 1;
			$curr = $$lineref;
			# Possible infinite loop is you leave data in there
			$$lineref = '';
		} else {
			$curr = substr ($$lineref, 0, $delim);
		}
		# Look for starting and ending double-quotes...
		if (index ($curr, '"', 0) != 0 || index ($curr, '"', length ($curr) - 1) != length ($curr) - 1) {
			# The field isn't properly delimited; try next comma and hope for the best
			$marker = $delim + 1;
			# Continue while there's still data to parse
			redo if ($$lineref);
			return undef;
		}
		if ($i == $colnum) {
			# We're done, extract the current column
			$col = substr ($curr, 1, length($curr) - 2) if ($curr);
			$$lineref = substr ($$lineref, $delim + 1) if ($$lineref);
		} else {
			# No more data?
			last unless ($$lineref);

			# Pop out the column
			$$lineref = substr ($$lineref, $delim + 1);
			$marker = 0;
		}
	}
	return $col;
}

sub datediff {
	# Date string to time diff. Ex. string: "01/22/2008 07:49:19.798"
	my $datestr = shift;

	$datestr =~ m#^(\d{2})/(\d{2})/(\d{4})\s(\d{2}):(\d{2}):(\d{2})\.(?:\d{3})$#;
	my ($month, $day, $year, $hour, $min, $sec) = ($1, $2, $3, $4, $5, $6);
	return undef if(!defined($month) || !defined($day) || !defined($year) || !defined($hour) || !defined($min) || !defined($sec));

	my ($nowsec, $nowmin, $nowhour, $nowday, $nowmon, $nowyear) = localtime();
	$nowmon++; $nowyear += 1900;

	# Seconds out from Google Calculator. Those are rounded averages; we
	# don't care about precision as we really shouldn't need to exceed one
	# day. We care about correctness though (i.e. same date last month is
	# NOT correct).
	my $diff = ($nowyear-$year)*31556926
	          +($nowmon-$month)*2629744
	          +($nowday-$day)*86400
	          +($nowhour-$hour)*3600
	          +($nowmin-$min)*60
	          +($nowsec-$sec);
	return $diff;
}

sub parse_last {
	# Parse Nagios perfdata string and extract 'time' and 'last' values.
	my $perfstr = shift;

	my @last;
	my @perfitems = split(/\s/, $perfstr);
	for (@perfitems) {
		if (m/^(.+?)=([+-]?\d+(?:\.\d+)?)(?:[^;]+)?.*/) {
			if ($1 eq 'time') {
				$last[0] = $2;
			} elsif ($1 eq 'last') {
				$last[1] = $2;
			}
		}
	}
	return (@last);
}

