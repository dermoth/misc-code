#!/usr/bin/perl
#
# check_akamai_bandwidth  -  Checks akamai bandwidth for all CP codes
#
# Copyright (C) 2009 Thomas Guyot-Sionnest <tguyot@gmail.com>
#
# FIXME: This plugin might give unexpected results if the call succeed but no
#        data is returned - not sure what's the proper way to check that.
#
# FIXME: I don't trust Perl on large values, although it seemed to work fine
#        when checking a >5Gbits/s account (which is more than 2**32 bits).
#        Use with care if you have anything bigger!
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

use strict;
use warnings;
use SOAP::Lite;
use MIME::Base64;
use Nagios::Plugin;
use Class::Date qw(gmdate);
use vars qw($PROGNAME $VERSION %PRMAP $PREFIX $user $pass $soap);
#use Data::Dumper;

$PROGNAME = 'check_akamai_bandwidth';
$VERSION = '1.2';

# Mapping of pefixes with multipliers
%PRMAP = (
	'b' => 1,
	'k' => 10**3,
	'M' => 10**6,
	'G' => 10**9,
	'T' => 10**12,
	'P' => 10**15,
	'E' => 10**18,
	'Z' => 10**21,
	'Y' => 10**24,
);

# Default prefix
$PREFIX = 'M';

# Debug options (Require Data::Dumper)
#use SOAP::Lite +trace => [
#	method => \&soap_debug,
#	fault => \&soap_debug,
#	trace => \&soap_debug,
#	debug => \&soap_debug,
#];

# Init nagios plugin

my $np = Nagios::Plugin->new(
	usage => "Usage: %s -u <user> -p <password>\n"
		. "       [ -w <warning> ] [ -c <critical> ]\n"
		. '       [ -P <prefix> ] [ -C <CP_Code>[,...] ]',
	version => $VERSION,
	plugin  => $PROGNAME,
	blurb => 'Checks akamai bandwidth for all CP codes',
	timeout => 30,
);

$np->add_arg(
	spec => 'user|u=s',
	help => "-u, --username=<user>\n"
	   . '   Username for Akamai login.',
	required => 1,
);

$np->add_arg(
	spec => 'pass|p=s',
	help => "-p, --pass=<password>\n"
	   . '   Password for Akamai login.',
	required => 1,
);

$np->add_arg(
	spec => 'warning|w=s',
	help => "-w, --warning=THRESHOLD\n"
	   . "   Warning threshold in Mbits/s (or any metric specificd with --prefix). See\n"
	   . "   http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT\n"
	   . '   for the threshold format.',
	required => 0,
);

$np->add_arg(
	spec => 'critical|c=s',
	help => "-c, --critical=THRESHOLD\n"
	   . "   Critical threshold in Mbits/s (or any metric specificd with --prefix). See\n"
	   . "   http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT\n"
	   . '   for the threshold format.',
	required => 0,
);

$np->add_arg(
	spec => 'prefix|P=s',
	help => "-P, --prefix=<b|k|M|G|T|P>\n"
	   . "   Prefix or pretty-printing (default: $PREFIX). Accepted values are: (b)its,\n"
	   . '   (k)ilobits, (M)egabits, (G)igabits, (T)erabits... up to (Y)ottabits.',
	default => $PREFIX,
	required => 0,
);

$np->add_arg(
	spec => 'cp|C=s@',
	help => "-C, --cp=INTEGER\n"
	   . "   CP Code(s) to check. Multiple CP Codes can be specified comma-separated and\n"
	   . '   by repeating this option. Default is to check all available CP Codes.',
	required => 0,
);

# process and check args
$np->getopts;
($user, $pass) = ($np->opts->user, $np->opts->pass);
my $prefix = $np->opts->prefix;
my @checkcp = map { split(/,/, $_) } @{$np->opts->cp} if ($np->opts->cp);

$np->set_thresholds(
	warning => ($np->opts->warning ? $np->opts->warning * $PRMAP{$prefix} : undef),
	critical => ($np->opts->critical ? $np->opts->critical * $PRMAP{$prefix} : undef),
);

# Return code and message
my $np_res = OK;
my $np_msg = '';

# Set alarm
alarm $np->opts->timeout;

# First get password expiry

$soap = SOAP::Lite
	->proxy('https://control.akamai.com/webservices/services/AWSManager')
	->on_fault(\&soap_error)
	->readable(1);

my $res = $soap->getPasswordExpirationDate();
checkres($soap);

my $expiry = gmdate($res->paramsall)->epoch() - time();
# It looks like password expiration can be negative; shall we care if we can still fetch data?
if ($expiry >= 0 && $expiry < 60*60*24*2) {
	if ($expiry < 60*60*24*1) {
		$np_res = CRITICAL;
	} else {
		$np_res = WARNING;
	}
	$np_msg = 'Account password will expire in ' . int(new Class::Date::Rel($expiry)->day) . ' days, ';
}

# Now get real data...

$soap = SOAP::Lite
	->proxy('https://control.akamai.com/nmrws/services/RealtimeReports')
	->on_fault(\&soap_error)
	->readable(1);

# We need the CP Code list
$res = $soap->getCPCodes();
checkres($soap);

my $cpcodes = $res->paramsall;
my @cpcodes = map { $_->{cpcode} } @$cpcodes;
my %uniq;
@uniq{@cpcodes} = ();

# Check whenever we need checking specific cp codes or all of them
if (@checkcp) {
	for (@checkcp) {
		$np->nagios_die("CP Code $_ not found") unless (exists($uniq{$_}));
	}
	%uniq = ();
	@uniq{@checkcp} = ();
}

@cpcodes = keys(%uniq);

# Now get bandwidth usage for all CP codes...
$res = $soap->getEdgeSuiteSummary(\@cpcodes, 'all_es', 'all');
checkres($soap);

my $bw = (split(/,/, $res->paramsall))[0];
$np->nagios_die("Invalid bandwidth result") if ($bw !~ /^\d+$/);

my $bw_perf = $bw;
# convert bits/sec to proper prefix and print it with two decimals (except for bits)
$bw = sprintf(($prefix eq 'b' ? '%s' : '%.02f'), $bw_perf / $PRMAP{$prefix});

$np->add_perfdata(
	label => 'bandwidth',
	value => $bw_perf,
	uom => 'b',
	threshold => $np->threshold,
);

# Any further use of prefix is for printing - print nothing if it's set for bits.
$prefix = '' if ($prefix eq 'b');

$np->nagios_exit($np->max_state_alt($np_res, $np->check_threshold($bw_perf)), $np_msg . "Current bandwidth usage: ${bw}${prefix}bits/s");


sub SOAP::Transport::HTTP::Client::get_basic_credentials {
	return $user => $pass;
}

sub checkres {
	my $soap = shift;
	if (!$soap->transport->is_success) {
		die "Transport error: " . $soap->transport->status;
	}
}

sub soap_error {
	my ($soap, $res) = @_;
	if (ref($res) ne 'SOAP::SOM') {
		# Can't call $res - auth failure?
		die "Couldn't retrieve data, authentication failure?";
	}
	die "\nError retrieving data: \n", $res->faultstring,"\n";
}

sub soap_debug {
	print "DEBUG\n" . Dumper(\@_) . "END\n";
}

