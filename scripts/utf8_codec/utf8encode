#!/bin/bash
#
# utf8decode - Given one or more underscore-encoded UTF-8 strings,
#              return the underscore-encoded version (one per line).
#

CP1_MAX=$((16#00007F))
CP2_MAX=$((16#0007FF))
CP3_MAX=$((16#00FFFF))
CP4_MAX=$((16#10FFFF))

getnibs() {
	local var=$1 pfxlen=$2 value=$3 prefix='2#' pshift mask i

	for ((i=0; i<pfxlen; i++)); do
		prefix+='1'
	done
	prefix+='0'
	# shift above prefix by complement
	pshift=$((8 - pfxlen - 1))
	((prefix <<= pshift))
	# Value mask - remaining bits
	mask=$((2 ** pshift -1))

	printf -v "$var" '%02x' $((prefix | (value & mask)))
}

utf8encode() {
	local var=$1 res='' enc chr i plen bits tmp

	for ((i=0; i<${#var}; i++)); do
		printf -v chr '%i' "'${var:$i:1}"
		# Match codepoints range to avoid playing with the locale...
		if ((chr >= 97 && chr <= 122)) ||  # [a-z]
		   ((chr >= 65 && chr <= 90))  ||  # [A-Z]
		   ((chr >= 48 && chr <= 57))  ||  # [0-9]
		   ((chr == 46)); then             # .
			res+="${var:$i:1}"
		else
			enc='_'
			plen=0
			bits=0
			if ((chr > CP4_MAX)); then
				echo >&2 "Invalid encoding" # possible?
				break
			elif ((chr > CP3_MAX)); then
				plen=4
				bits=18  # not counting the first nibble
			elif ((chr > CP2_MAX)); then
				plen=3
				bits=12
			elif ((chr > CP1_MAX)); then
				plen=2
				bits=6
			fi  # else 7-bit ascii, plen=bits=0

			getnibs tmp $plen $((chr >> bits))
			enc+=${tmp:?"Assigned by ref, make shellcheck happy"}
			for ((bits-=6; bits>=0; bits-=6)); do
				getnibs tmp 1 $((chr >> bits))
				enc+=$tmp
			done
			res+=$enc
		fi
	done
	printf -v ret '%s' "$res"
}

# test
# set -- foo‚ÅΩ‚Ñ¢‚Åæbarüêç

for arg in "$@"; do
	utf8encode "$arg"
	printf '%s\n' "$ret"
done
